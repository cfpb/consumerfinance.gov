[tox]
skipsdist=True
# Run these envs when tox is invoked without -e
envlist=lint, validate-migrations, unittest


[testenv]
# Factored env for running most things with a matrix of Python, Django, and
# Wagtail versions. Configuration of individual top-level factors like lint
# and unittest is done in their respective configuration sections below.
#
# Factors:
#   lint:       Lint Python files with flake8 and isort
#   unittest:   Run Python unittests
#
# These factors are expected to combine into the follow generative environments:
#
#   lint
#   unittest
#
# These factors are expected to combine to be invoked with:
#
#   tox -e lint
#   tox -e unittest

recreate=False

allowlist_externals=echo

changedir=
    unittest:           {[unittest-config]changedir}

basepython=python3.6

deps=
    lint:       {[lint-config]deps}
    unittest:   {[unittest-config]deps}

passenv=
    unittest:   {[unittest-config]passenv}

setenv=
    unittest:           {[unittest-config]setenv}

commands=
    lint:               {[lint-config]commands}
    unittest:           {[unittest-config]commands}


[lint-config]
# Configuration necessary to lint Python files.
# Note: This is not an env and will not run if invoked. Use:
#
#   tox -e lint
#
# To run Python linting.
deps=
    flake8
    isort
commands=
    flake8
    isort --check-only --diff cfgov


[unittest-config]
# Configuration necessary to run unittests.
# Note: This is not an env and will not run if invoked. Use:
#
#   tox -e unittest
#
# To run unit tests.
changedir=
    {toxinidir}/cfgov
passenv=
    DATABASE_URL ES_HOST ES_PORT GITHUB_ACTIONS SKIP_DJANGO_MIGRATIONS TEST_RUNNER
setenv=
    GOVDELIVERY_ACCOUNT_CODE=fake_account_code
    DJANGO_ADMIN_USERNAME=admin
    DJANGO_ADMIN_PASSWORD=admin
    LANG=en_US.UTF-8
    LC_ALL=en_US.UTF-8
    WAGTAIL_SHARING_HOSTNAME=content.localhost
    DJANGO_SETTINGS_MODULE=cfgov.settings.test
deps=
    -r{toxinidir}/requirements/libraries.txt
    -r{toxinidir}/requirements/django.txt
    -r{toxinidir}/requirements/wagtail.txt
    -r{toxinidir}/requirements/test.txt
commands=
    coverage erase
    python -b -m coverage run --source='.' manage.py test {posargs}


## Standalone and user-friendly envs


[testenv:unittest]
# Invoke with: tox -e unittest
recreate=False
envdir={toxworkdir}/unittest
deps=
    {[unittest-config]deps}
commands={[unittest-config]commands}


[testenv:lint]
# Invoke with: tox -e lint
recreate=False
envdir={toxworkdir}/lint
deps={[lint-config]deps}
commands={[lint-config]commands}


[testenv:validate-assets]
# Invoke with: tox -e validate-assets
# Ensure all assets are generated without error.
recreate=False
changedir={toxinidir}
deps=
    {[unittest-config]deps}
setenv=
    DJANGO_SETTINGS_MODULE=cfgov.settings.production
    DJANGO_STATIC_ROOT={toxinidir}/collectstatic
    ALLOWED_HOSTS=["*"]
commands=
    {toxinidir}/frontend.sh ci
    {toxinidir}/cfgov/manage.py collectstatic --noinput


[testenv:validate-migrations]
# Invoke with: tox -e validate-migrations
# Ensure that we're not missing any migations
recreate=False
envdir={toxworkdir}/unittest
changedir={[unittest-config]changedir}
deps=
    {[unittest-config]deps}
passenv=
    DATABASE_URL
setenv=
    DJANGO_SETTINGS_MODULE=cfgov.settings.production
    DJANGO_STATIC_ROOT={toxinidir}/collectstatic
    ALLOWED_HOSTS=["*"]
    SECRET_KEY="fake-secret-key"
commands=
    python manage.py makemigrations --dry-run --check


[testenv:validate-translations]
# Invoke with: tox -e validate-translations
# Ensure that there are no changes to translatable strings that aren't
# contained in the comitted portable object files.
# This ultimate tests whether the generated django.mo file has changed
# (the django.po file will change because it includes the date it was
# generated).
# NOTE: Requires gettext. Will overwrite any existing
# cfgov/locale/*/LC_MESSAGES/django.po files.
recreate=False
envdir={toxworkdir}/unittest
changedir={[unittest-config]changedir}
deps=
    {[unittest-config]deps}
setenv={[unittest-config]setenv}
allowlist_externals=
    git
commands=
    python manage.py makemessages
    python manage.py compilemessages
    git diff --quiet locale/*/LC_MESSAGES/django.mo

[testenv:coverage]
# Invoke with: tox -e coverage
# Report out the coverage of changes on the current branch against the main
# branch. This will fail if the coverage of changes is below 100%. This env
# requires a coverage file and should only be run after unittest
deps=
    -r{toxinidir}/requirements/test.txt
commands=
    coverage xml
    diff-cover coverage.xml --compare-branch=origin/main --fail-under=100

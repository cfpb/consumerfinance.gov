[tox]
envlist=py27
skipsdist=True

[testenv]
# Invoke with: tox
changedir={toxinidir}/cfgov
commands=
    coverage erase
    coverage run --source='.' manage.py test {posargs}
deps=-r{toxinidir}/requirements/test.txt
envdir={toxworkdir}/py27
passenv=TRAVIS TRAVIS_JOB_ID TRAVIS_BRANCH
recreate=True
setenv=
    GOVDELIVERY_ACCOUNT_CODE=fake_account_code
    DJANGO_SETTINGS_MODULE=cfgov.settings.test
    DJANGO_STAGING_HOSTNAME=content.localhost
    LANG=en_US.UTF-8
    LC_ALL=en_US.UTF-8

[testenv:fast]
# Invoke with: tox -e fast
# Don't recreate virtualenv, skip Django migrations.
envdir={[testenv]envdir}
recreate=False
setenv=
    {[testenv]setenv}
    DJANGO_SETTINGS_MODULE=cfgov.settings.test_nomigrations

[testenv:acceptance]
# Invoke with: tox -e acceptance
# Run acceptance tests using same virtualenv as backend tests.
# Always skips unnecessary Django migrations.
envdir={[testenv]envdir}
passenv=
    USER
    HEADLESS_CHROME_BINARY
    DISPLAY
    SAUCE_USERNAME
    SAUCE_ACCESS_KEY
    SAUCE_SELENIUM_URL
    SAUCE_TUNNEL
setenv=
    {[testenv]setenv}
    DJANGO_LIVE_TEST_SERVER_ADDRESS=localhost:9000-9010
    DJANGO_SETTINGS_MODULE=cfgov.settings.test_acceptance
commands=./manage.py test {posargs}

[testenv:acceptance-fast]
# Invoke with: tox -e acceptance-fast
# Run acceptance tests without recreating virtualenv.
envdir={[testenv:acceptance]envdir}
passenv={[testenv:acceptance]passenv}
recreate=False
setenv={[testenv:acceptance]setenv}
commands=./manage.py test {posargs}

[testenv:optional]
# Invoke with: tox -e optional
# Also run tests against public optional Django apps.
# Uses alternate virtualenv with -optional suffix.
deps=
    -r{toxinidir}/requirements/optional-public.txt
    {[testenv]deps}
envdir={[testenv]envdir}-optional

[testenv:optional-fast]
# Invoke with: tox -e optional-fast
# Include optional public apps but don't recreate virtualenv each time.
# Also skips unnecessary Django migrations.
deps={[testenv:optional]deps}
envdir={[testenv:optional]envdir}
recreate={[testenv:fast]recreate}
setenv={[testenv:fast]setenv}

[testenv:missing-migrations]
# Invoke with: tox -e missing-migrations
# Check for changes to Django models that are missing migrations by 
# running a script that calls makemigrations and examines the result.
# The missing_migrations script can be removed in favor of 
# `makemigrations --check` when we move to Django 1.10+.
envdir={[testenv]envdir}
recreate=False
whitelist_externals=echo
setenv=
    {[testenv]setenv}
    DJANGO_SETTINGS_MODULE=cfgov.settings.test
commands=
    ./manage.py runscript missing_migrations 

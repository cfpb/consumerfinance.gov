[tox]
skipsdist=True
tox_pip_extensions_ext_venv_update=True
# Run these envs when tox is invoked without -e
envlist=lint-{current}, validate-migrations, unittest-{current,future}


[testenv]
# Factored env for running most things with a matrix of Python, Django, and
# Wagtail versions. Configuration of individual top-level factors like lint
# and unittest is done in their respective configuration sections below.
#
# Factors:
#   lint:       Lint Python files with flake8 and isort
#   unittest:   Run Python unittests
#   acceptance: Run a Django server and acceptance tests
#   current:    Use the current production Python, Django, Wagtail
#   future:     Use the latest production Python, Django, Wagtail
#
# These factors are expected to combine into the follow generative environments:
#
#   lint-current
#   lint-future
#   unittest-current
#   unittest-future
#   acceptance-current
#   acceptance-future
#
# These factors are expected to combine to be invoked with:
#
#   tox -e lint-current
#   tox -e lint-future
#   tox -e unittest-current
#   tox -e unittest-future
#   tox -e acceptance-current
#   tox -e acceptance-future

recreate=False

whitelist_externals=echo

changedir=
    unittest:           {[unittest-config]changedir}
    acceptance:         {[acceptance-config]changedir}

basepython=
    current: {[current-config]basepython}
    future: {[future-config]basepython}

deps=
    current:    {[current-config]deps}
    future:     {[future-config]deps}
    lint:       {[lint-config]deps}
    unittest:   {[unittest-config]deps}
    acceptance: {[acceptance-config]deps}

passenv=
    unittest:   {[unittest-config]passenv}
    acceptance: {[acceptance-config]passenv}

setenv=
    unittest:           {[unittest-config]setenv}
    acceptance:         {[acceptance-config]setenv}

commands=
    lint:               {[lint-config]commands}
    unittest:           {[unittest-config]commands}
    acceptance:         {[acceptance-config]commands}


[lint-config]
# Configuration necessary to lint Python files.
# Note: This is not an env and will not run if invoked. Use:
#
#   tox -e lint-{current, future}
#
# To run Python linting.
deps=
    flake8
    isort
commands=
    flake8
    isort --check-only --diff cfgov


[unittest-config]
# Configuration necessary to run unittests.
# Note: This is not an env and will not run if invoked. Use:
#
#   tox -e unittest-{current, future}
#
# To run unit tests.
changedir=
    {toxinidir}/cfgov
passenv=
    DATABASE_URL TEST_RUNNER
setenv=
    GOVDELIVERY_ACCOUNT_CODE=fake_account_code
    DJANGO_ADMIN_USERNAME=admin
    DJANGO_ADMIN_PASSWORD=admin
    LANG=en_US.UTF-8
    LC_ALL=en_US.UTF-8
    WAGTAIL_SHARING_HOSTNAME=content.localhost
    DJANGO_SETTINGS_MODULE=cfgov.settings.test
    DATABASE_URL={env:DATABASE_URL:postgres://cfpb:cfpb@localhost/cfgov}
deps=
    -r{toxinidir}/requirements/libraries.txt
    -r{toxinidir}/requirements/test.txt
commands=
    coverage erase
    {env:CI_CHECK_MIGRATIONS:echo "Skipping CI-only step"}
    python -b -m coverage run --source='.' manage.py test {posargs}


[current-config]
# Configuration necessary for the production versions Python, Django and
# Wagtail
# Note: This is not an env and will not run if invoked. Use:
#
#   tox -e unittest-current
#   tox -e unittest
#
# To run unittests with the current production versions.
basepython=python3.6
deps=
    -r{toxinidir}/requirements/django.txt
    -r{toxinidir}/requirements/wagtail.txt

[future-config]
# Configuration necessary for upcoming versions of Python, Django, and
# Wagtail. This is the place where the "future" dependencies will need to be
# modified when we're ready to track new versions of Python, Django, or
# Wagtail.
# Note: This is not an env and will not run if invoked. Use:
#
#   tox -e unittest-future
#
# To run unittests with the upcoming versions specified here.
basepython=python3.6
deps=
    Django>=2.2,<3.0
    wagtail>=2.3,<2.10


[acceptance-config]
# Configuration necessary to run acceptance tests using same
# virtualenv as backend tests.
# Note: This is not an env and will not run if invoked. Use:
#
#   tox -e acceptance-{current, future}
#
# To run acceptance tests.
changedir=
    {[unittest-config]changedir}
deps=
    {[unittest-config]deps}
passenv=
    USER
    DISPLAY
    SAUCE_USERNAME
    SAUCE_ACCESS_KEY
    SAUCE_SELENIUM_URL
    SAUCE_TUNNEL
setenv=
    DJANGO_LIVE_TEST_SERVER_ADDRESS=localhost:9000-9010
    DJANGO_SETTINGS_MODULE=cfgov.settings.test_acceptance
commands=
    ./manage.py test {posargs}


## Standalone and user-friendly envs


[testenv:unittest]
# Invoke with: tox -e unittest
# This should run identically to tox -e unittest-current
recreate=False
basepython={[current-config]basepython}
envdir={toxworkdir}/unittest-current
deps=
    {[current-config]deps}
    {[unittest-config]deps}
commands={[unittest-config]commands}


[testenv:lint]
# Invoke with: tox -e lint
# This should run identically to tox -e lint-current
recreate=False
basepython={[current-config]basepython}
envdir={toxworkdir}/lint-current
deps={[lint-config]deps}
commands={[lint-config]commands}


[testenv:acceptance]
# Invoke with: tox -e acceptance
# Set up an environment against which acceptance tests can be run
recreate=False
changedir={[acceptance-config]changedir}
basepython={[current-config]basepython}
envdir={toxworkdir}/acceptance-current
deps=
    {[current-config]deps}
    {[acceptance-config]deps}
passenv={[acceptance-config]passenv}
setenv=
    acceptance: {[acceptance-config]setenv}
    LANG=en_US.UTF-8
    LC_ALL=en_US.UTF-8
commands={[acceptance-config]commands}


[testenv:validate-assets]
# Invoke with: tox -e validate-assets
# Ensure all assets are generated without error.
recreate=False
changedir={toxinidir}
basepython={[current-config]basepython}
deps=-r{toxinidir}/requirements/base.txt
setenv=
    DJANGO_SETTINGS_MODULE=cfgov.settings.production
    DJANGO_STATIC_ROOT={toxinidir}/collectstatic
    ALLOWED_HOSTS=["*"]
commands=
    {toxinidir}/frontend.sh ci
    {toxinidir}/cfgov/manage.py collectstatic --noinput


[testenv:validate-migrations]
# Invoke with: tox -e validate-migrations
# Ensure that we're not missing any migations
recreate=False
envdir={toxworkdir}/unittest-current
changedir={[unittest-config]changedir}
basepython={[current-config]basepython}
deps=-r{toxinidir}/requirements/base.txt
setenv=
    DJANGO_SETTINGS_MODULE=cfgov.settings.production
    DJANGO_STATIC_ROOT={toxinidir}/collectstatic
    ALLOWED_HOSTS=["*"]
commands=
    python manage.py makemigrations --dry-run --check

[tox]
skipsdist=True
envlist=py27

[py2]
# Common python2.7 configuration
# This allows us to share the py2 env across testenvs
envdir={toxworkdir}/py27
basepython=python2.7

[py3]
# Common python3.6 configuration
# This allows us to share the py3 env across testenvs
envdir={toxworkdir}/py36
basepython=python3.6

[testenv]
# Invoke with: tox
basepython=
    py27: {[py2]basepython}
    py36: {[py3]basepython}
envdir=
    py27: {[py2]envdir}
    py36: {[py3]envdir}
changedir={toxinidir}/cfgov
commands=
    coverage erase
    coverage run --source='.' manage.py test {posargs}
deps=-r{toxinidir}/requirements/test.txt
passenv=TRAVIS TRAVIS_JOB_ID TRAVIS_BRANCH
recreate=True
# BOTO_CONFIG exists here to work around an incompatability between
# boto and Travis CI
# https://github.com/travis-ci/travis-ci/issues/5246#issuecomment-166460882
setenv=
    GOVDELIVERY_ACCOUNT_CODE=fake_account_code
    DJANGO_SETTINGS_MODULE=cfgov.settings.test
    DJANGO_STAGING_HOSTNAME=content.localhost
    LANG=en_US.UTF-8
    LC_ALL=en_US.UTF-8
    BOTO_CONFIG=/bogus/value

[testenv:fast]
# Invoke with: tox -e fast
# Don't recreate virtualenv, skip Django migrations.
basepython={[py2]basepython}
envdir={[py2]envdir}
recreate=False
setenv=
    {[testenv]setenv}
    DJANGO_SETTINGS_MODULE=cfgov.settings.test_nomigrations

[testenv:fast-py3]
basepython={[py3]basepython}
envdir={[py3]envdir}
recreate={[testenv:fast]recreate}
setenv={[testenv:fast]setenv}

[testenv:acceptance]
# Invoke with: tox -e acceptance
# Run acceptance tests using same virtualenv as backend tests.
# Always skips unnecessary Django migrations.
basepython={[py2]basepython}
envdir={[py2]envdir}
passenv=
    USER
    HEADLESS_CHROME_BINARY
    DISPLAY
    SAUCE_USERNAME
    SAUCE_ACCESS_KEY
    SAUCE_SELENIUM_URL
    SAUCE_TUNNEL
setenv=
    {[testenv]setenv}
    DJANGO_LIVE_TEST_SERVER_ADDRESS=localhost:9000-9010
    DJANGO_SETTINGS_MODULE=cfgov.settings.test_acceptance
commands=./manage.py test {posargs}

[testenv:acceptance-fast]
# Invoke with: tox -e acceptance-fast
# Run acceptance tests without recreating virtualenv.
basepython={[py2]basepython}
envdir={[testenv:acceptance]envdir}
passenv={[testenv:acceptance]passenv}
recreate=False
setenv={[testenv:acceptance]setenv}
commands=./manage.py test {posargs}

[testenv:missing-migrations]
# Invoke with: tox -e missing-migrations
# Check for changes to Django models that are missing migrations by
# running a script that calls makemigrations and examines the result.
# The missing_migrations script can be removed in favor of
# `makemigrations --check` when we move to Django 1.10+.
basepython={[py2]basepython}
envdir={[py2]envdir}
recreate=False
whitelist_externals=echo
setenv=
    {[testenv]setenv}
    DJANGO_SETTINGS_MODULE=cfgov.settings.test
commands=
    ./manage.py runscript missing_migrations

[testenv:validate-assets]
# Invoke with: tox -e validate-assets
# Ensure all assets are generated without error.
basepython={[py2]basepython}
envdir={[py2]envdir}
changedir={toxinidir}
recreate=False
deps=
    -r{toxinidir}/requirements/mysql.txt
    {[testenv]deps}
    -r{toxinidir}/requirements/optional-public.txt
setenv=
    {[testenv]setenv}
    DJANGO_SETTINGS_MODULE=cfgov.settings.production
    DJANGO_STATIC_ROOT={toxinidir}/collectstatic
commands=
    {toxinidir}/frontend.sh production
    {toxinidir}/cfgov/manage.py collectstatic --noinput

[testenv:lint]
basepython={[py2]basepython}
envdir={[py2]envdir}
recreate=False
commands=
    flake8
    isort --check-only --diff --recursive cfgov

[testenv:lint-py3]
basepython={[py3]basepython}
envdir={[py3]envdir}
recreate={[testenv:lint]recreate}
commands={[testenv:lint]commands}

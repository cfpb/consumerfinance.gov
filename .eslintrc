# Enable ecmascript 6 features.
ecmaFeatures:
  arrowFunctions: false
  binaryLiterals: false
  blockBindings: false
  classes: false
  defaultParams: false
  destructuring: false
  forOf: true
  generators: false
  modules: false
  objectLiteralComputedProperties: false
  objectLiteralDuplicateProperties: false
  objectLiteralShorthandMethods: false
  objectLiteralShorthandProperties: false
  octalLiterals: false
  regexUFlag: false
  regexYFlag: false
  spread: false
  superInFunctions: false
  templateStrings: false
  unicodeCodePointEscapes: false
  globalReturn: false
  jsx: true

parser: espree

env:
  browser: true
  node: true
  worker: false
  amd: true
  mocha: false
  jasmine: false
  phantomjs: true
  jquery: false
  prototypejs: false
  shelljs: false
  meteor: false
  mongo: false
  applescript: false
  es6: false

globals:
# No globals outside of env settings.

# Linting rules for ESLint.
# 0's ignore a rule, 1's produce a warning, and 2's throw an error.
# See http://eslint.org/docs/rules/ for full documentation.
rules:

  # Rules for flagging POSSIBLE ERRORS.

  # Consistent use of trailing commas in object and array literals.
  # This rule is needed for IE8- support.
  comma-dangle:
    - 2
    - never

  # Disallows assignment in conditional expressions.
  no-cond-assign:
    - 2
    - except-parens

  # Enforces flagging use of the console.
  no-console: 1

  # Disallows use of constant expressions in conditions.
  no-constant-condition: 2

  # Disallows control characters in regular expressions.
  no-control-regex: 2

  # Enforces flagging use of the debugger.
  no-debugger: 2

  # Disallow duplicate arguments in functions.
  no-dupe-args: 2

  # Disallows duplicate keys when creating object literals.
  no-dupe-keys: 2

  # Disallow a duplicate case label.
  no-duplicate-case: 2

  # Disallow the use of empty character classes in regular expressions.
  no-empty-character-class: 2

  # Disallows empty statements.
  no-empty: 2

  # Disallows assigning to the exception in a catch block.
  no-ex-assign: 2

  # Disallows double-negation boolean casts in a boolean context.
  no-extra-boolean-cast: 2

  # Disallows unnecessary parentheses.
  no-extra-parens:
    - 1
    - all

  # Disallows unnecessary semicolons.
  no-extra-semi: 2

  # Disallows overwriting functions written as declarations.
  no-func-assign: 2

  # Disallows function declarations in nested blocks.
  no-inner-declarations:
    - 2
    - functions

  # Disallows invalid regex strings in the RegExp constructor.
  no-invalid-regexp: 2

  # Disallows irregular whitespace outside of strings and comments.
  no-irregular-whitespace: 2

  # Disallows negation of the left operand of an in expression.
  no-negated-in-lhs: 2

  # Disallows use of the global Math and JSON objects as functions.
  no-obj-calls: 2

  # Disallows multiple spaces in a regular expression literal.
  no-regex-spaces: 2

  # Disallows reserved words being used as object literal keys.
  # Unneeded in ECMAScript 5+ environments.
  no-reserved-keys: 2

  # Disallows sparse arrays.
  # Array values should be explicitly defined.
  no-sparse-arrays: 2

  # Disallows unreachable statements after a return, throw, continue, or break.
  no-unreachable: 2

  # Disallows comparisons with the value NaN.
  use-isnan: 2

  # Enforces valid JSDoc parameters and return types comments.
  valid-jsdoc:
    - 2
    -
      prefer:
        return: returns
      requireReturn: false
      requireParamDescription: true
      requireReturnDescription: true

  # Enforces that the results of typeof are compared against a valid string.
  valid-typeof: 2

  # Avoid code that looks like two expressions but is actually one.
  no-unexpected-multiline: 2


  # Rules for encouraging BEST PRACTICES.

  # Enforces getter/setter pairs in objects.
  accessor-pairs:
    - 1
    -
      getWithoutSet: false

  # Enforces treating var statements as if they were block scoped.
  block-scoped-var: 1

  # Enforces specific maximum cyclomatic complexity.
  complexity:
    - 1
    - 4

  # Enforces return statements to either always or never specify values.
  consistent-return: 2

  # Enforces curly brace conventions for all control statements.
  curly:
    - 1
    - multi-line

  # Enforces default case in switch statements.
  default-case: 2

  # Enforces use of dot notation whenever possible.
  # `allowKeywords` = false follows ECMAScript version 3 compatible style.
  dot-notation:
    - 2
    -
      allowKeywords: false
      allowPattern: ''

  # Enforces consistent newlines before or after dots.
  dot-location:
    - 2
    - property

  # Enforces use of === and !== over == and !=.
  eqeqeq:
     - 2
     - smart

  # Enforces necessary if statements in for-in loops.
  guard-for-in: 1

  # Disallows use of alert, confirm, and prompt.
  no-alert: 2

  # Disallows use of arguments.caller or arguments.callee.
  no-caller: 2

  # Disallows division operators explicitly at beginning of regex.
  no-div-regex: 2

  # Disallows else after a return in an if.
  no-else-return: 2

  # Disallows use of labels, other than in loops and switches.
  no-empty-label: 2

  # Disallows comparisons to null without a type-checking operator.
  no-eq-null: 2

  # Disallows use of eval().
  no-eval: 2

  # Disallows adding to native types.
  no-extend-native: 2

  # Disallows unnecessary function binding.
  no-extra-bind: 2

  # Disallows fallthrough of case statements.
  no-fallthrough: 1

  # Disallows use of leading or trailing decimal points in numeric literals.
  no-floating-decimal: 2

  # Disallows use of eval()-like methods.
  no-implied-eval: 2

  # Disallows usage of __iterator__ property.
  no-iterator: 2

  # Disallows use of labeled statements.
  no-labels: 2

  # Disallows unnecessary nested blocks.
  no-lone-blocks: 2

  # Disallows creation of functions within loops.
  no-loop-func: 2

  # Disallows use of multiple spaces.
  no-multi-spaces:
    - 2
    -
      exceptions:
        BinaryExpression: false
        Property: true

  # Disallows use of multiline strings with a trailing backslash.
  # This rule is needed for ECMAScript environments earlier than 5.
  no-multi-str: 2

  # Disallows reassignments of native objects.
  no-native-reassign: 2

  # Disallows use of new operator for Function object.
  no-new-func: 2

  # Disallows creating new instances of String, Number, and Boolean.
  no-new-wrappers: 2

  # Disallows use of new operator when not part of the assignment or comparison.
  no-new: 1

  # Disallows use of octal escape sequences in string literals, e.g. "\251".
  no-octal-escape: 2

  # Disallows use of octal literals.
  no-octal: 2

  # Disallow reassignment of function parameters.
  no-param-reassign: 0

  # Disallows use of process.env.
  # Only applicable to Node.js.
  no-process-env: 2

  # Disallows usage of __proto__ property.
  no-proto: 2

  # Disallows declaring the same variable more then once.
  no-redeclare: 2

  # Disallows use of assignment in return statement.
  no-return-assign:
    - 2
    - 'except-parens'

  # Disallows use of javascript: urls.
  no-script-url: 2

  # Disallows comparisons where both sides are exactly the same.
  no-self-compare: 2

  # Disallows use of comma operator.
  no-sequences: 1

  # Restrict what can be thrown as an exception.
  no-throw-literal: 2

  # Disallows usage of expressions in statement position.
  no-unused-expressions: 2

  # Disallows use of void operator.
  no-void: 2

  # Disallows use of configurable warning terms in comments, e. g. TODO.
  no-warning-comments:
    - 1
    -
      terms:
        - '@todo'
        - todo
        - fixme
        - xxx
      location: start

  # Disallows use of the with statement.
  no-with: 2

  # Require use of the second argument for parseInt().
  radix: 2

  # Require all vars on top of their containing scope.
  vars-on-top: 0

  # Require immediate function invocation to be wrapped in parentheses.
  wrap-iife:
    - 2
    - inside

  # Disallows Yoda conditions.
  yoda:
    - 2
    - never
    -
      exceptRange: true
      onlyEquality: false


  # Rules for STRICT MODE.

  # Controls location of Use Strict Directives.
  # Ensures all function bodies are strict mode code, while global code is not.
  # Caveat: when run on pre-concatenated code, global mode may look like
  # function mode after concatenation.
  strict:
    - 2
    - global


  # Rules for VARIABLES.

  # Disallows the catch clause parameter name being the same as a variable
  # in the outer scope.
  # This rule is needed for IE8- support.
  no-catch-shadow: 2

  # Disallows deletion of variables.
  no-delete-var: 2

  # Disallows labels that share a name with a variable.
  no-label-var: 2

  # Disallows shadowing of names such as arguments.
  no-shadow-restricted-names: 2

  # Disallows declaring variables already declared in the outer scope.
  no-shadow: 1

  # Disallows use of undefined when initializing variables.
  no-undef-init: 2

  # Disallows use of undeclared vars unless mentioned in a /*global */ block.
  no-undef: 2

  # Disallows use of undefined variable.
  no-undefined: 2

  # Disallows declaration of variables that are not used in the code.
  no-unused-vars:
    - 1
    -
      vars: all
      args: after-used

  # Disallows use of variables before they are defined.
  no-use-before-define:
    - 2
    - nofunc


  # Rules for NODE.JS.

  # Enforce error handling in callbacks.
  # Matches any string that contains err or Err (err, error, anyError, an_err).
  handle-callback-err:
    - 2
    - ^.*(e|E)rr

  # Disallows mixing regular variable and require declarations.
  # This rule may have inaccurate behavior in Node 0.6- and if UMD is used.
  no-mixed-requires:
    - 1
    - true

  # Disallows use of new operator with the require function.
  no-new-require: 2

  # Disallows string concatenation with __dirname and __filename.
  no-path-concat: 2

  # Disallows use of process.exit().
  no-process-exit: 1

  # Restrict usage of specific node modules.
  no-restricted-modules: 0

  # Disallows use of synchronous methods.
  no-sync: 2


  # Rules for STYLISTIC ISSUES.
  # These rules are purely matters of style and are quite subjective.

  # Enforce spacing inside array brackets.
  array-bracket-spacing:
    - 1
    - always

  # Enforce one true brace style.
  brace-style:
    - 2
    - 1tbs
    -
      allowSingleLine: true

  # Enforce camel case names.
  camelcase:
    - 1
    -
      properties: always

  # Enforce spacing before and after comma.
  comma-spacing:
    - 2
    -
      before: false
      after: true

  # Enforce one true comma style.
  comma-style:
    - 2
    - last

  # Require or disallow padding inside computed properties.
  computed-property-spacing:
    - 1
    - never

  # Enforce consistent naming when capturing the current execution context.
  # This should be turned on if ESLint supports a regex for the
  # matching value in the future for the ^[_]?self regex.
  consistent-this:
    - 0
    - ''

  # Enforce newline at the end of file, with no multiple empty lines.
  eol-last: 2

  # Enforce function expressions not having a name.
  func-names: 0

  # Enforce use of function declarations or expressions
  # because of variable hoisting behavior.
  func-style:
    - 1
    - declaration

  # Set a specific tab width for your code.
  indent:
    - 2
    - 2
    -
      indentSwitchCase: false

  # Enforce spacing between keys and values in object literal properties.
  key-spacing:
    - 1
    -
      align: value
      beforeColon: false
      afterColon: true

  # Enforces empty lines around comments.
  lines-around-comment:
    - 1
    -
      beforeBlockComment: true
      afterBlockComment: false
      beforeLineComment: false
      afterLineComment: false
      allowBlockStart: false
      allowBlockEnd: false

  # Disallow mixed 'LF' and 'CRLF' as linebreaks.
  linebreak-style:
    - 2
    - unix

  # Specify the maximum depth callbacks can be nested.
  max-nested-callbacks:
    - 2
    - 3

  # Require a capital letter for constructors.
  new-cap:
    - 2
    -
      newIsCap: true
      capIsNew: true
      newIsCapExceptions: []
      capIsNewExceptions: []

  # Disallows omission of parentheses when invoking a constructor with no arguments.
  new-parens: 2

  # Disallow an empty newline after var statement.
  newline-after-var:
    - 0
    - always

  # Disallows use of the Array constructor.
  no-array-constructor: 2

  # Disallow use of the continue statement.
  no-continue: 1

  # Disallows inline after code.
  no-inline-comments: 1

  # Disallows if as the only statement in an else block.
  no-lonely-if: 2

  # Disallows mixed spaces and tabs for indentation.
  # Include "smart-tabs" option to suppresses warnings tabs used for alignment.
  no-mixed-spaces-and-tabs: 2

  # Disallows when more than 2 blank lines are used.
  no-multiple-empty-lines:
    - 1
    -
      max: 2

  # Disallows nested ternary expressions.
  no-nested-ternary: 2

  # Disallows use of the Object constructor.
  no-new-object: 2

  # Disallows space between function identifier and invocation.
  no-spaced-func: 2

  # Disallows the use of ternary operators.
  no-ternary: 0

  # Disallows trailing whitespace at the end of lines.
  no-trailing-spaces:
    - 2
    - skipBlankLines: false

  # Disallows dangling underscores in identifiers.
  no-underscore-dangle: 0

  # Disallow the use of Boolean literals in conditional expressions.
  no-unneeded-ternary: 0

  # Require or disallow padding inside curly braces.
  object-curly-spacing:
    - 1
    - always
    -
      objectsInObjects: false
      arraysInObjects: false

  # Disallows multiple var statements per function.
  one-var:
    - 0
    - always

  # Requires assignment operator shorthand or prohibit it entirely.
  operator-assignment:
    - 2
    - always

  # Enforce operators to be placed before or after line breaks.
  operator-linebreak:
    - 1
    - after

  # Enforces padding within blocks.
  padded-blocks:
    - 0
    - always

  # Requires quotes around object literal property names.
  quote-props:
    - 1
    - as-needed

  # Specifies whether double or single quotes should be used.
  quotes:
    - 2
    - single
    - avoid-escape

  # Disallows space before semicolon.
  semi-spacing:
    - 2
    -
      before: false
      after: true

  # Requires or disallows use of semicolons instead of ASI.
  semi:
    - 2
    - always

  # Enforces sorting variables within the same declaration block.
  sort-vars: 0

  # Requires a space after certain keywords.
  space-after-keywords:
    - 2
    - always

  # Requires space before blocks.
  space-before-blocks:
    - 2
    - always

  # Requires space before function parentheses.
  space-before-function-paren:
    - 1
    -
      anonymous: never
      named: never

  # Requires spaces inside parentheses.
  space-in-parens:
    - 1
    - always

  # Requires spaces around operators.
  space-infix-ops:
    - 2
    -
      int32Hint: false

  # Requires a space after return, throw, and case.
  space-return-throw-case: 2

  # Requires spaces before/after unary operators.
  space-unary-ops:
    - 2
    -
      words: true
      nonwords: false

  # Require or disallow a space immediately following // or /* in a comment.
  spaced-comment:
    - 2
    - always
    -
      exceptions:
        - '-'
        - +
      markers:
        - /

  # Requires regex literals to be wrapped in parentheses.
  wrap-regex: 2


  # Rules for ECMASCRIPT 6.
  # These rules are only relevant to ES6 environments.

  # Verify super() callings in constructors.
  constructor-super: 2

  # Enforces the position of the * in generator functions.
  generator-star-spacing:
    - 2
    -
      before: true
      after: false

  # Disallow to use this/super before super() calling in constructors.
  no-this-before-super: 2

  # Requires using let or const instead of var.
  # This should be turned on when browser support is better.
  no-var: 0

  # Require method and property shorthand syntax for object literals.
  object-shorthand:
    - 0
    - always

  # Suggest using of const declaration for variables that are never modified.
  prefer-const: 1


  # Rules for LEGACY SUPPORT.
  # These rules provide compatibility with JSHint/JSLint rules.

  # Specifies maximum depth that blocks can be nested.
  max-depth:
    - 1
    - 5

  # Specifies maximum length of a line in your program.
  max-len:
    - 1
    - 80
    - 4

  # Limits number of parameters that can be used in the function declaration.
  max-params:
    - 1
    - 5

  # Specifies maximum number of statement allowed in a function.
  max-statements:
    - 1
    - 25

  # Disallows use of bitwise operators.
  no-bitwise: 0

  # Disallows use of unary operators, ++ and --.
  no-plusplus: 0

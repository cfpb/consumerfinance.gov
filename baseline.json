{
  "_links": {
    "root": {
      "href": "/"
    },
    "self": {
      "href": "/scans/517eacf5-6426-4b0a-8177-1aa986264801/findings"
    },
    "help": {
      "href": "https://docs.veracode.com/"
    }
  },
  "scan_id": "517eacf5-6426-4b0a-8177-1aa986264801",
  "scan_status": "SUCCESS",
  "message": "Scan successful. Results size: 67687 bytes",
  "modules": [
    "JS files within cfgov-gha.zip",
    "Python files within cfgov-gha.zip"
  ],
  "modules_count": 2,
  "findings": [
    {
      "cwe_id": "259",
      "display_text": "\u003cspan\u003eThis variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. SECRET_KEY\u003c/span\u003e \u003cspan\u003eStore passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/259.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/cfgov/settings/local.py",
          "function_prototype": "",
          "line": 6,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1000,
      "issue_type": "Use of Hard-coded Password",
      "issue_type_id": "s",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "SECRET_KEY"
    },
    {
      "cwe_id": "331",
      "display_text": "\u003cspan\u003eStandard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\u003c/span\u003e \u003cspan\u003eIf this random number is used where security is a concern, such as generating passwords, session keys, authentication etc, use a trusted cryptographic random number generator instead. The new secrets module introduced in Python 3.6, is used for generating such cryptographically strong random number generators.\u003c/span\u003e \u003cspan\u003eReferences:\u003ca href\u003d\"https://cwe.mitre.org/data/definitions/331.html\"\u003eCWE\u003c/a\u003e \u003cBR\u003e\u003ca href\u003d\"https://docs.python.org/3/library/secrets.html#module-secrets\"\u003esecrets module\u003c/a\u003e\u003cBR\u003e\u003ca href\u003d\"https://cryptography.io/en/latest/\"\u003ecryptography.io\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/retirement_api/utils/check_api.py",
          "function_prototype": "",
          "line": 72,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1001,
      "issue_type": "Insufficient Entropy",
      "issue_type_id": "sink",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "random.randrange"
    },
    {
      "cwe_id": "215",
      "display_text": "\u003cspan\u003eEnabling django.DEBUG() property exposes debug information that may expose sensitive information which an attacker can use to fingerprint the application. This information can be used by an attacker in executing other more sophisticated attacks and can also enable the attacker to target known vulnerabilities in application components.\u003c/span\u003e\u003cspan\u003eMake sure, () property is disabled, in production configurations.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/215.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/cfgov/settings/local.py",
          "function_prototype": "",
          "line": 4,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1002,
      "issue_type": "Information Exposure Through Debug Information",
      "issue_type_id": "t",
      "severity": 2,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "django.DEBUG"
    },
    {
      "cwe_id": "183",
      "display_text": "\u003cspan\u003eThe django.ALLOWED_HOSTS() property is configured with at least one value such as using wildcards(*), which might allow this application to be accessed by an untrusted domain. This could open up your application to same kinds of attacks as XSS, or arbitrary execution of untrusted javascript on your servers.\u003c/span\u003e\u003cspan\u003eMake sure, domains allowed to communicate with your applications, are carefully allowlisted and configured accordingly.\u003c/span\u003e\u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/183.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/cfgov/settings/local.py",
          "function_prototype": "",
          "line": 7,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1003,
      "issue_type": "Permissive List of Allowed Inputs",
      "issue_type_id": "t",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "django.ALLOWED_HOSTS"
    },
    {
      "cwe_id": "284",
      "display_text": "\u003cspan\u003eThe function boto3.S3.Client.put_object() is passed an access control argument that is either externally controllable or hardcoded to a weak setting. This could result in a malicious actor to access and control resources that they should not.\u003c/span\u003e \u003cspan\u003eSet a strong, hardcoded value if it is warranted, or otherwise not directly using an externally controlled value.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/284.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/data_research/mortgage_utilities/s3_utils.py",
          "function_name": "bake_csv_to_s3",
          "function_prototype": "",
          "line": 45,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1004,
      "issue_type": "Improper Access Control",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "boto3.S3.Client.put_object"
    },
    {
      "cwe_id": "99",
      "display_text": "\u003cspan\u003eThis call to boto3.SQS.Client.receive_message() contains user-supplied input.  This call is performing a potentially sensitive operation with parameters that should not be manipulable by unauthorized users.  Depending on the operation, persistent server parameters could be set or the application\u0027s data sources could be manipulated.  \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  In general, avoid executing code derived from untrusted input.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/99.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/alerts/post_sqs_messages.py",
          "function_prototype": "",
          "line": 129,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1006,
      "issue_type": "Improper Control of Resource Identifiers (\u0027Resource Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "boto3.SQS.Client.receive_message"
    },
    {
      "cwe_id": "532",
      "display_text": "\u003cspan\u003eThe function logging.Logger.debug() is writing sensitive data to a log file which may result in an attacker gaining information which could lead to a compromise.\u003c/span\u003e \u003cspan\u003eBe sure to remove any sensitive data from strings prior to writing to the log file.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/532.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/alerts/post_sqs_messages.py",
          "function_prototype": "",
          "line": 142,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1007,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "infoleak",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.debug"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/alerts/send_new_relic_messages_to_sqs.py",
          "function_prototype": "",
          "line": 121,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1008,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.info"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/alerts/send_new_relic_messages_to_sqs.py",
          "function_prototype": "",
          "line": 116,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1009,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.info"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/ask_cfpb/views.py",
          "function_name": "view_answer",
          "function_prototype": "",
          "line": 48,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1010,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "django.shortcuts.redirect"
    },
    {
      "cwe_id": "532",
      "display_text": "\u003cspan\u003eThe function logging.Logger.info() is writing sensitive data to a log file which may result in an attacker gaining information which could lead to a compromise.\u003c/span\u003e \u003cspan\u003eBe sure to remove any sensitive data from strings prior to writing to the log file.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/532.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/cdntools/backends.py",
          "function_name": "post_all",
          "function_prototype": "",
          "line": 54,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1011,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "infoleak",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.info"
    },
    {
      "cwe_id": "532",
      "display_text": "\u003cspan\u003eThe function logging.Logger.info() is writing sensitive data to a log file which may result in an attacker gaining information which could lead to a compromise.\u003c/span\u003e \u003cspan\u003eBe sure to remove any sensitive data from strings prior to writing to the log file.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/532.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/cdntools/backends.py",
          "function_name": "post",
          "function_prototype": "",
          "line": 67,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1012,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "infoleak",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.info"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.debug() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/housing_counselor/geocoder.py",
          "function_name": "mapbox_geocode_zipcodes",
          "function_prototype": "",
          "line": 178,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1013,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.debug"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.warning() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/housing_counselor/geocoder.py",
          "function_name": "mapbox_geocode_zipcodes",
          "function_prototype": "",
          "line": 174,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1014,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.warning"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.warning() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/housing_counselor/geocoder.py",
          "function_name": "mapbox_geocode_zipcodes",
          "function_prototype": "",
          "line": 169,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1015,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.warning"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.debug() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/housing_counselor/geocoder.py",
          "function_name": "mapbox_geocode_zipcodes",
          "function_prototype": "",
          "line": 164,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1016,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.debug"
    },
    {
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to django.http.JsonResponse() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html. In addition, as a best practice, always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/searchgov/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 119,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1017,
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "django.http.JsonResponse"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/cdntools/backends.py",
          "function_name": "post",
          "function_prototype": "",
          "line": 67,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1018,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.info"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/housing_counselor/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 124,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1019,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "django.shortcuts.redirect"
    },
    {
      "cwe_id": "99",
      "display_text": "\u003cspan\u003eThis call to requests.get() contains user-supplied input.  This call is performing a potentially sensitive operation with parameters that should not be manipulable by unauthorized users.  Depending on the operation, persistent server parameters could be set or the application\u0027s data sources could be manipulated.  \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  In general, avoid executing code derived from untrusted input.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/99.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/searchgov/views.py",
          "function_name": "get",
          "function_prototype": "",
          "line": 68,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1020,
      "issue_type": "Improper Control of Resource Identifiers (\u0027Resource Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "requests.get"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/data_research/models.py",
          "function_name": "validate_counties",
          "function_prototype": "",
          "line": 378,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1021,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.info"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/data_research/scripts/process_mortgage_data.py",
          "function_name": "process_source",
          "function_prototype": "",
          "line": 122,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1022,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.info"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/paying_for_college/disclosures/scripts/update_colleges.py",
          "function_name": "update",
          "function_prototype": "",
          "line": 203,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1023,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.info"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/regulations3k/management/commands/update_regulation_index.py",
          "function_name": "handle",
          "function_prototype": "",
          "line": 54,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1024,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.info"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/regulations3k/management/commands/update_regulation_index.py",
          "function_name": "handle",
          "function_prototype": "",
          "line": 66,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1025,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.info"
    },
    {
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to open() contains a path manipulation flaw.  The argument to the function is a filename constructed using user-supplied input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/alerts/send_new_relic_messages_to_sqs.py",
          "function_name": "read_known_violations",
          "function_prototype": "",
          "line": 78,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1026,
      "issue_type": "External Control of File Name or Path",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "open"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/alerts/send_new_relic_messages_to_sqs.py",
          "function_name": "read_known_violations",
          "function_prototype": "",
          "line": 85,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1027,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.info"
    },
    {
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to open() contains a path manipulation flaw.  The argument to the function is a filename constructed using user-supplied input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/alerts/send_new_relic_messages_to_sqs.py",
          "function_name": "cache_known_violations",
          "function_prototype": "",
          "line": 70,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1028,
      "issue_type": "External Control of File Name or Path",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "open"
    },
    {
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to shutil.copytree() contains a path manipulation flaw.  The argument to the function is a filename constructed using user-supplied input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/deployable_zipfile/create.py",
          "function_name": "create_zipfile",
          "function_prototype": "",
          "line": 80,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1029,
      "issue_type": "External Control of File Name or Path",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "shutil.copytree"
    },
    {
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to zipfile.ZipFile() contains a path manipulation flaw.  The argument to the function is a filename constructed using user-supplied input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/deployable_zipfile/extract.py",
          "function_name": "extract_zipfile",
          "function_prototype": "",
          "line": 32,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1030,
      "issue_type": "External Control of File Name or Path",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "zipfile.ZipFile"
    },
    {
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to os.listdir() contains a path manipulation flaw.  The argument to the function is a filename constructed using user-supplied input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/deployable_zipfile/install_wheels.py",
          "function_name": "install_wheels",
          "function_prototype": "",
          "line": 9,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1031,
      "issue_type": "External Control of File Name or Path",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "os.listdir"
    },
    {
      "cwe_id": "78",
      "display_text": "\u003cspan\u003eThis call to subprocess.check_call() contains a command injection flaw.  The argument to the function is constructed using user-supplied input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Command_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/deployable_zipfile/install_wheels.py",
          "function_name": "install_wheels",
          "function_prototype": "",
          "line": 12,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1032,
      "issue_type": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 5,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "subprocess.check_call"
    },
    {
      "cwe_id": "99",
      "display_text": "\u003cspan\u003eThis call to requests.get() contains user-supplied input.  This call is performing a potentially sensitive operation with parameters that should not be manipulable by unauthorized users.  Depending on the operation, persistent server parameters could be set or the application\u0027s data sources could be manipulated.  \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  In general, avoid executing code derived from untrusted input.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/99.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/retirement_api/utils/check_api.py",
          "function_name": "run",
          "function_prototype": "",
          "line": 92,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1033,
      "issue_type": "Improper Control of Resource Identifiers (\u0027Resource Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "requests.get"
    },
    {
      "cwe_id": "532",
      "display_text": "\u003cspan\u003eThe function logging.Logger.debug() is writing sensitive data to a log file which may result in an attacker gaining information which could lead to a compromise.\u003c/span\u003e \u003cspan\u003eBe sure to remove any sensitive data from strings prior to writing to the log file.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/532.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/alerts/post_sqs_messages.py",
          "function_name": "process_sqs_message",
          "function_prototype": "",
          "line": 76,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1034,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "infoleak",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.debug"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/alerts/send_new_relic_messages_to_sqs.py",
          "function_name": "cache_known_violations",
          "function_prototype": "",
          "line": 73,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1035,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.info"
    },
    {
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to open() contains a path manipulation flaw.  The argument to the function is a filename constructed using user-supplied input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/deployable_zipfile/create.py",
          "function_name": "create_project_pth_file",
          "function_prototype": "",
          "line": 56,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1036,
      "issue_type": "External Control of File Name or Path",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "open"
    },
    {
      "cwe_id": "601",
      "display_text": "\u003cspan\u003eThis call to django.shortcuts.redirect() contains a URL redirection to untrusted site flaw.  Writing unsanitized user-supplied input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\u003c/span\u003e \u003cspan\u003eAlways validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible. \u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/601.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/tccp/views.py",
          "function_name": "redirect_to_results",
          "function_prototype": "",
          "line": 44,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1037,
      "issue_type": "URL Redirection to Untrusted Site (\u0027Open Redirect\u0027)",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "django.shortcuts.redirect"
    },
    {
      "cwe_id": "117",
      "display_text": "\u003cspan\u003eThis call to logging.Logger.info() could result in a log forging attack.  Writing unsanitized user-supplied data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker\u0027s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. \u003c/span\u003e \u003cspan\u003eAvoid directly embedding user input in log files when possible.  Sanitize user-supplied data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.   Only create a custom blocklist when absolutely necessary.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/117.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Log_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "cfgov/cdntools/views.py",
          "function_name": "purge",
          "function_prototype": "",
          "line": 28,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1038,
      "issue_type": "Improper Output Neutralization for Logs",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "logging.Logger.info"
    },
    {
      "title": "jQueryResult.html",
      "issue_id": 1000,
      "image_path": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.html() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
          "upload_file": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
          "line": 281,
          "function_name": "lambda_11",
          "qualified_function_name": "lambda_11",
          "function_prototype": "lambda_11(: any,  : any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "959356617",
        "prototype_hash": "2190638875",
        "flaw_hash": "804925330",
        "flaw_hash_count": 2,
        "flaw_hash_ordinal": 2,
        "cause_hash": "2999531497",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "438364638",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.html",
      "issue_id": 1001,
      "image_path": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.html() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
          "upload_file": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
          "line": 389,
          "function_name": "setTextByAge",
          "qualified_function_name": "setTextByAge",
          "function_prototype": "setTextByAge(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3633443077",
        "prototype_hash": "1068780593",
        "flaw_hash": "804925330",
        "flaw_hash_count": 6,
        "flaw_hash_ordinal": 1,
        "cause_hash": "2999531497",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "438364638",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.html",
      "issue_id": 1003,
      "image_path": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.html() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
          "upload_file": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
          "line": 396,
          "function_name": "setTextByAge",
          "qualified_function_name": "setTextByAge",
          "function_prototype": "setTextByAge(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3633443077",
        "prototype_hash": "1068780593",
        "flaw_hash": "804925330",
        "flaw_hash_count": 6,
        "flaw_hash_ordinal": 4,
        "cause_hash": "2999531497",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "438364638",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.html",
      "issue_id": 1002,
      "image_path": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.html() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
          "upload_file": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
          "line": 422,
          "function_name": "setTextByAge",
          "qualified_function_name": "setTextByAge",
          "function_prototype": "setTextByAge(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3633443077",
        "prototype_hash": "1068780593",
        "flaw_hash": "2560374387",
        "flaw_hash_count": 3,
        "flaw_hash_ordinal": 3,
        "cause_hash": "61553967",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "1522093433",
        "cause_hash2_ordinal": "5"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "jQueryResult.html",
      "issue_id": 1004,
      "image_path": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to jQueryResult.html() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
          "upload_file": "cfgov/unprocessed/apps/retirement/js/views/graph-view.js",
          "line": 438,
          "function_name": "setTextByAge",
          "qualified_function_name": "setTextByAge",
          "function_prototype": "setTextByAge(: any, ...) : any",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "3633443077",
        "prototype_hash": "1068780593",
        "flaw_hash": "804925330",
        "flaw_hash_count": 6,
        "flaw_hash_ordinal": 5,
        "cause_hash": "2999531497",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "438364638",
        "cause_hash2_ordinal": "2"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    },
    {
      "title": "__vc_output_raw",
      "issue_id": 1005,
      "image_path": "vcode-normalized/cfgov/filing_instruction_guide/jinja2/filing_instruction_guide/data_points.html.js",
      "gob": "B",
      "severity": 3,
      "issue_type_id": "taint",
      "issue_type": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
      "cwe_id": "80",
      "display_text": "\u003cspan\u003eThis call to __vc_output_raw() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim\u0027s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. \u003c/span\u003e \u003cspan\u003eUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/79.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/xss/\"\u003eOWASP\u003c/a\u003e \u003ca href\u003d\"https://docs.veracode.com/r/review_cleansers\"\u003eSupported Cleansers\u003c/a\u003e\u003c/span\u003e",
      "files": {
        "source_file": {
          "file": "cfgov/filing_instruction_guide/jinja2/filing_instruction_guide/data_points.html",
          "upload_file": "cfgov/filing_instruction_guide/jinja2/filing_instruction_guide/data_points.html",
          "line": 67,
          "function_name": "!main",
          "qualified_function_name": "!main",
          "function_prototype": "!main() : void",
          "scope": "UNKNOWN"
        }
      },
      "flaw_match": {
        "procedure_hash": "819132307",
        "prototype_hash": "211846691",
        "flaw_hash": "3979568159",
        "flaw_hash_count": 1,
        "flaw_hash_ordinal": 1,
        "cause_hash": "349310349",
        "cause_hash_count": 1,
        "cause_hash_ordinal": 1,
        "cause_hash2": "3683657511",
        "cause_hash2_ordinal": "1"
      },
      "stack_dumps": {
        "stack_dump": [
          {}
        ]
      },
      "flaw_details_link": "https://downloads.veracode.com/securityscan/cwe/v4/java/80.html"
    }
  ],
  "selected_modules": [],
  "pipeline_scan": "25.2.0-0",
  "scan_app_id": "cfgov",
  "dev_stage": "DEVELOPMENT"
}
# ---------------------------------------------------------------------------

#
# This file configures the New Relic Python Agent.
#
# The path to the configuration file should be specified in the
# NEW_RELIC_CONFIG_FILE environment variable.
#
# The configuration file follows a structure similar to what you would
# find for Microsoft Windows INI files. For further information on the
# configuration file format see the Python ConfigParser documentation at:
#
#    http://docs.python.org/library/configparser.html
#
# For further discussion on the behaviour of the Python agent that can
# be configured via this configuration file see:
#
#    http://newrelic.com/docs/python/python-agent-configuration
#
# This file was initially generated using "newrelic-admin generate-config"
# as documented at:
#
#    https://docs.newrelic.com/docs/agents/python-agent/installation
#
# It was then edited and augmented with additional configuration settings.
#

# ---------------------------------------------------------------------------

# Here are the settings that are common to all environments.

[newrelic]

# You must specify the license key associated with your New
# Relic account. This key binds the Python Agent's data to your
# account in the New Relic service.
#
# This must be specified in the NEW_RELIC_LICENSE_KEY environment
# variable.
# license_key = <provided in environment>

# The application name. Set this to be the name of your
# application as you would like it to show up in New Relic UI.
# The UI will then auto-map instances of your application into a
# entry on your home dashboard page.
#
# This must be specified in the NEW_RELIC_APP_NAME environment
# variable.
# app_name = <provided in environment>

# When "true", the agent collects performance data about your
# application and reports this data to the New Relic UI at
# newrelic.com. This global switch is normally overridden for
# each environment below.

# Sets the name of a file to log agent messages to. Useful for
# debugging any issues with the agent. This is not set by
# default as it is not known in advance what user your web
# application processes will run as and where they have
# permission to write to. Whatever you set this to you must
# ensure that the permissions for the containing directory and
# the file itself are correct, and that the user that your web
# application runs as can write to the file. If not able to
# write out a log file, it is also possible to say "stderr" and
# output to standard error output. This would normally result in
# output appearing in your web server log.
#
# This must be specified in the NEW_RELIC_LOG environment variable.
# log_file = <provided in environment>

# Sets the level of detail of messages sent to the log file, if
# a log file location has been provided. Possible values, in
# increasing order of detail, are: "critical", "error", "warning",
# "info" and "debug". When reporting any agent issues to New
# Relic technical support, the most useful setting for the
# support engineers is "debug". However, this can generate a lot
# of information very quickly, so it is best not to keep the
# agent at this level for longer than it takes to reproduce the
# problem you are experiencing.
log_level = info

# High Security Mode enforces certain security settings, and prevents
# them from being overridden, so that no sensitive data is sent to New
# Relic. Enabling High Security Mode means that request parameters are
# not collected and SQL can not be sent to New Relic in its raw form.
# To activate High Security Mode, it must be set to 'true' in this
# local .ini configuration file AND be set to 'true' in the
# server-side configuration in the New Relic user interface. For
# details, see
# https://docs.newrelic.com/docs/subscriptions/high-security
high_security = true

# The Python Agent will attempt to connect directly to the New
# Relic service. If there is an intermediate firewall between
# your host and the New Relic service that requires you to use a
# HTTP proxy, then you should set both the "proxy_host" and
# "proxy_port" settings to the required values for the HTTP
# proxy. The "proxy_user" and "proxy_pass" settings should
# additionally be set if proxy authentication is implemented by
# the HTTP proxy. The "proxy_scheme" setting dictates what
# protocol scheme is used in talking to the HTTP proxy. This
# would normally always be set as "http" which will result in the
# agent then using a SSL tunnel through the HTTP proxy for end to
# end encryption.
# proxy_scheme = http
# proxy_host = hostname
# proxy_port = 8080
# proxy_user =
# proxy_pass =

# Capturing request parameters is off by default. To enable the
# capturing of request parameters, first ensure that the setting
# "attributes.enabled" is set to "true" (the default value), and
# then add "request.parameters.*" to the "attributes.include"
# setting. For details about attributes configuration, please
# consult the documentation.
# attributes.include = request.parameters.*

# The transaction tracer captures deep information about slow
# transactions and sends this to the UI on a periodic basis. The
# transaction tracer is enabled by default. Set this to "false"
# to turn it off.
transaction_tracer.enabled = true

# Threshold in seconds for when to collect a transaction trace.
# When the response time of a controller action exceeds this
# threshold, a transaction trace will be recorded and sent to
# the UI. Valid values are any positive float value, or (default)
# "apdex_f", which will use the threshold for a dissatisfying
# Apdex controller action - four times the Apdex T value.
transaction_tracer.transaction_threshold = apdex_f

# When the transaction tracer is on, SQL statements can
# optionally be recorded. The recorder has three modes, "off"
# which sends no SQL, "raw" which sends the SQL statement in its
# original form, and "obfuscated", which strips out numeric and
# string literals.
transaction_tracer.record_sql = obfuscated

# Threshold in seconds for when to collect stack trace for a SQL
# call. In other words, when SQL statements exceed this
# threshold, then capture and send to the UI the current stack
# trace. This is helpful for pinpointing where long SQL calls
# originate from in an application.
transaction_tracer.stack_trace_threshold = 0.5

# Determines whether the agent will capture query plans for slow
# SQL queries. Only supported in MySQL and PostgreSQL. Set this
# to "false" to turn it off.
transaction_tracer.explain_enabled = true

# Threshold for query execution time below which query plans
# will not not be captured. Relevant only when "explain_enabled"
# is true.
transaction_tracer.explain_threshold = 0.5

# Space separated list of function or method names in form
# 'module:function' or 'module:class.function' for which
# additional function timing instrumentation will be added.
transaction_tracer.function_trace =

# The error collector captures information about uncaught
# exceptions or logged exceptions and sends them to UI for
# viewing. The error collector is enabled by default. Set this
# to "false" to turn it off.
error_collector.enabled = true

# To stop specific errors from reporting to the UI, set this to
# a space separated list of the Python exception type names to
# ignore. The exception name should be of the form 'module:class'.
error_collector.ignore_errors =

# Browser monitoring is the Real User Monitoring feature of the UI.
# For those Python web frameworks that are supported, this
# setting enables the auto-insertion of the browser monitoring
# JavaScript fragments.
browser_monitoring.auto_instrument = true

# A thread profiling session can be scheduled via the UI when
# this option is enabled. The thread profiler will periodically
# capture a snapshot of the call stack for each active thread in
# the application to construct a statistically representative
# call tree.
thread_profiler.enabled = true

# Your application deployments can be recorded through the
# New Relic REST API. To use this feature provide your API key
# below then use the `newrelic-admin record-deploy` command.
# api_key =

# Distributed tracing lets you see the path that a request takes
# through your distributed system. Enabling distributed tracing
# changes the behavior of some New Relic features, so carefully
# consult the transition guide before you enable this feature:
# https://docs.newrelic.com/docs/transition-guide-distributed-tracing
distributed_tracing.enabled = false

# ---------------------------------------------------------------------------

#
# Additional settings not part of the default agent configuration below here.
#

# ---------------------------------------------------------------------------

# Enables cross-application tracing, which connect your apps and services
# within your service-oriented architecture.
cross_application_tracer.enabled = true

# Allow recording of events to the Insights custom events API via
# record_custom_event(). Required when high security mode is enabled.
custom_insights_events.enabled = false

# When true, the agent will instrument your web app, but will not send any
# actual data to New Relic. In this offline mode, you will not be billed
# for an active agent.
#
# Use developer mode to test new versions of the agent, or test the agent
# against third-party packages in a developer environment. Offline mode is
# not a way of running New Relic locally, because the metrics the agent
# collects are not reported anywhere.
developer_mode = false

# If enabled, the error collector captures information about uncaught
# exceptions.
error_collected.enabled = true

# Lists HTTP status codes which the agent should ignore rather than record
# as errors. List additional status codes as integers separated by spaces,
# and specify ranges with a hyphen - separator between the start and end
# values. To whitelist one of the default codes, preface the code with an
# exclamation point !.
#
# This setting is only compatible with some web frameworks, as some
# frameworks do not use exceptions to return HTTP responses.
error_collector.ignore_status_codes = 100-102 200-208 226 300-308

# Adds message properties to tracer attributes. Set this to false to turn
# it off. This option is automatically enabled in high security mode.
message_tracer.segment_parameters_enabled = false

# If enabled, the agent captures details from long-running SQL database
# queries.
slow_sql.enabled = true

# If enabled, exception messages will be stripped from error traces before
# they are sent to the New Relic collector, in order to prevent the
# inadvertent capture of sensitive information. This option is
# automatically enabled in high security mode.
strip_exception_messages.enabled = True

# Exceptions listed in the whitelist will not have their messages stripped,
# even if strip_exception_messages.enabled is true. The whitelist is a
# space-separated string of exception types, each in the form of
# module:exception_name. List built-in exceptions as exception_name; you
# do not need to prepend module: to them.
strip_exception_messages.whitelist =
    AssertionError
    AttributeError
    Exception
    ImportError
    IndexError
    IOError
    KeyError
    NameError
    OSError
    RuntimeError
    SyntaxError
    TypeError
    UnicodeDecodeError
    UnicodeEncodeError
    ValueError
    django.core.exceptions:FieldError
    django.core.exceptions:ImproperlyConfigured
    django.core.exceptions:PermissionDenied
    django.core.exceptions:SuspiciousOperation
    django.core.exceptions:ValidationError
    django.core.exceptions:ViewDoesNotExist
    django.core.urlresolvers:NoReverseMatch
    django.db.utils:DatabaseError
    django.db.utils:IntegrityError
    django.db.utils:InternalError
    django.db.utils:OperationalError
    django.db.utils:ProgrammingError
    django.http.request:UnreadablePostError
    django.template.base:TemplateDoesNotExist
    django.template.base:TemplateSyntaxError
    elasticsearch.exceptions:ConnectionTimeout
    elasticsearch.exceptions:NotFoundError
    jinja2.exceptions:TemplateNotFound
    jinja2.exceptions:UndefinedError
    knowledgebase.models:MultipleObjectsReturned
    regulations.views.error_handling:MissingContentException
    requests.exceptions:ConnectionError
    requests.exceptions:HTTPError
    urllib2:URLError

# Transaction event data allows the New Relic UI to show additional
# information such as histograms and percentiles.
transaction_events.enabled = true

# This setting can be used to turn on or off all attributes for
# transaction events. If attributes.enabled is false at the root level,
# then no attributes will be sent to transaction events regardless on how
# this configuration setting (transaction_events.attributes.enabled) is set.
transaction_events.attributes.enabled = true

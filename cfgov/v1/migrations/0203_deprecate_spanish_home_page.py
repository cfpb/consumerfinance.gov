# -*- coding: utf-8 -*-
# Generated by Django 1.11.27 on 2020-02-24 18:36

import json

from django.db import migrations, models
from django.db.models.deletion import Collector


def change_spanish_home_pages_to_home_pages(apps, schema_editor):
    SpanishHomePage = apps.get_model('v1', 'SpanishHomePage')
    spanish_home_pages = SpanishHomePage.objects.all()

    # If there are no SpanishHomePages, nothing to do.
    if not spanish_home_pages.exists():
        return

    ContentType = apps.get_model('contenttypes', 'ContentType')
    Page = apps.get_model('wagtailcore', 'Page')
    PageRevision = apps.get_model('wagtailcore', 'PageRevision')

    # When running migrations against an empty database, there won't already
    # be a ContentType for the HomePage model type. But we need one in order to
    # convert SpanishHomePages to that type. So use get_or_create here to
    # either use the existing ContentType or create a new one.
    homepage_content_type, _ = ContentType.objects.get_or_create(
        app_label='v1',
        model='homepage'
    )

    # This is by no means a general solution to the problem of changing a
    # Wagtail Page's type, but seems to work for this specific situation, where
    # we meet these requirements:
    #
    # - Changing a child page into its immediate parent's page type
    # - There are no foreign keys from the child page type to other models
    # - There are no foreign keys from other models to the child page type
    collector = Collector(using=schema_editor.connection.alias)

    for page in spanish_home_pages:
        # This deletes the page's row in the v1_spanishhomepage table without
        # touching the parent v1_homepage, v1_cfgovpage, or wagtailcore_page
        # tables.
        collector.collect([page], keep_parents=True, collect_related=False)
        collector.delete()

        # This updates the wagtailcore_page table to set the page's new type.
        page.content_type = homepage_content_type
        Page.save(page, update_fields=['content_type'])

        # Finally fixup existing page revisions so they also have the right
        # content type. This doesn't affect anything, but is good for
        # consistency.
        for revision in PageRevision.objects.filter(page_id=page.pk):
            content = json.loads(revision.content_json)
            content['content_type'] = homepage_content_type.pk
            revision.content_json = json.dumps(content)
            revision.save(update_fields=['content_json'])


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '__first__'),
        ('v1', '0202_cleanup_legacy_homepage'),
    ]

    operations = [
        migrations.RunPython(
            change_spanish_home_pages_to_home_pages,
            # It isn't easily possible to convert Django parent models to
            # child model types, so this migration isn't reversible.
            # See https://code.djangoproject.com/ticket/7623.
            migrations.RunPython.noop
        ),
        migrations.DeleteModel(
            name='SpanishHomePage',
        ),
    ]

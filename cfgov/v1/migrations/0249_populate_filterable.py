# Generated by Django 3.2.19 on 2023-06-09 13:29

import json

from django.db import migrations


def migrate_object(obj, filterable_list):
    data = {
        "filtered_ordering": filterable_list.get("ordering", "-start_date"),
        "filter_children_only": filterable_list.get("filter_children", True),
        "filtered_date_label": filterable_list.get("post_date_description"),
        "show_filtered_categories": filterable_list["categories"].get(
            "show_preview_categories", True
        ),
    }

    page_type_based_values = {
        "show_filtered_dates": True,
        "show_filtered_tags": True,
    }

    page_type_overrides = {
        "cfpb-researchers": {"show_filtered_dates": False},
        "consumer-reporting": {"show_filtered_dates": False},
        "foia-freq-req-record": {"show_filtered_tags": False},
    }

    page_type = filterable_list["categories"].get("page_type")
    page_type_based_values.update(page_type_overrides.get(page_type, {}))

    data.update(page_type_based_values)

    if isinstance(obj, dict):
        obj.update(data)
    else:
        for k, v in data.items():
            setattr(obj, k, v)


def get_filterable_list(content):
    for block in content:
        if block["type"] == "filter_controls":
            return block["value"]


def migrate(apps, schema_editor):
    ContentType = apps.get_model("contenttypes", "ContentType")
    Revision = apps.get_model("wagtailcore.Revision")

    for classname in ("BrowseFilterablePage", "SublandingFilterablePage"):
        page_class = apps.get_model("v1", classname)
        page_contenttype_id = ContentType.objects.get_for_model(page_class).id

        for page in page_class.objects.all():
            filterable_list = get_filterable_list(page.content.raw_data)

            if filterable_list:
                migrate_object(page, filterable_list)
                page.save()

            for revision in Revision.objects.filter(
                content_type_id=page_contenttype_id, object_id=page.pk
            ):
                revision_content = json.loads(revision.content["content"])
                filterable_list = get_filterable_list(revision_content)

                if not filterable_list:
                    continue

                migrate_object(revision.content, filterable_list)
                revision.save()


class Migration(migrations.Migration):
    dependencies = [
        ("v1", "0248_filterable_list_mixin"),
    ]

    operations = [
        migrations.RunPython(migrate, elidable=True),
    ]

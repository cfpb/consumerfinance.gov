import zipfile
from io import BytesIO, StringIO

from django import forms
from django.core.management import call_command


class CacheInvalidationForm(forms.Form):
    url = forms.URLField(required=False,
                         widget=forms.URLInput(attrs={'class': 'url'}))


class ExportFeedbackForm(forms.Form):
    from_date = forms.DateField(
        widget=forms.widgets.DateInput(attrs={'type': 'date'}))
    to_date = forms.DateField(
        widget=forms.widgets.DateInput(attrs={'type': 'date'}))

    # The feedback export generated by this form segments all site feedback
    # into several different files, determined by these page slugs. A separate
    # file named 'other' is generated containing all other feedback.
    export_files = {
        'ask': ('ask-cfpb', 'obtener-respuestas'),
        'bah': ('owning-a-home',),
    }

    @property
    def filename_dates(self):
        return '{}_to_{}'.format(*(
            self.cleaned_data[k].strftime('%Y%m%d')
            for k in ('from_date', 'to_date')
        ))

    def generate_zipfile(self):
        zf_buffer = BytesIO()

        zf = zipfile.ZipFile(zf_buffer, 'a', zipfile.ZIP_DEFLATED)

        for csv_filename, csv_contents in self.generate_zipfile_csvs():
            zf.writestr(csv_filename, csv_contents)

        zf.close()

        zf_buffer.seek(0)
        return zf_buffer

    def generate_zipfile_csvs(self):
        all_pages = []

        for name, page_slugs in self.export_files.items():
            # Generate one CSV for each entry in export_files defined above.
            yield self.generate_zipfile_csv(name, page_slugs)

            all_pages.extend(page_slugs)

        # Generate a final CSV containing all pages not already exported.
        yield self.generate_zipfile_csv('other', all_pages, exclude=True)

    def generate_zipfile_csv(self, name, pages, exclude=False):
        csv_contents = StringIO()
        csv_filename = f'feedback_{name}_{self.filename_dates}.csv'

        call_command(
            'export_feedback',
            *pages,
            exclude=exclude,
            from_date=self.cleaned_data['from_date'],
            to_date=self.cleaned_data['to_date'],
            stdout=csv_contents
        )

        return csv_filename, csv_contents.getvalue()

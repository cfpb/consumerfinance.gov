/* ==========================================================================
   consumerfinance.gov
   Print
   ========================================================================== */


/* topdoc
  name: Print pages
  family: cfgov-print
  notes:
    - "Print pages are barebones printer friendly pages which are also sometimes
       used as the source to generate PDF's through PDF creation software."
    - "The `.print` class acts a styling hook. When using the
       `.respond-to-print()` mixin, all stlyes will be nested under both
       `@media print` and `.print`."
  patterns:
    - name: Usage
      markup: |
        <div class="print">
            <h1 class="superheader">
                I am a green superheader
            </h1>
        </div>
      notes:
        - "To trigger a print page simply add the `.print` class to a containing
           element."
  tags:
    - cfgov-print
*/

.respond-to-print({
    a {
        font-weight: 500;
    }

    a:after {
        border-bottom: 1px solid @white;
        font-weight: 300;
        word-break: break-all;
    }

    a[href*="://"]:after {
        // Output href in parentheses for links with a protocol already there.
        content: " (" attr(href) ")";
    }

    a[href^="/"]:after {
        // Output root-relative hrefs in parentheses with our domain prepended.
        content: " (cfpb.gov" attr(href) ")";
    }

    a[href^="/ask-cfpb/"]:after,
    a[href^="/external-site"]:after,
    a[href*="consumerfinance.gov/ask-cfpb"]:after,
    a[href*="consumerfinance.gov/external-site"]:after {
        // Output original href for links with external site interstitial.
        content: " (" attr(data-pretty-href) ")";
    }

    a.o-header_logo-img:after,
    a.m-info-unit_heading-link:after,
    .m-info-unit_content h4 a:after {
        // Don't append hrefs to the logo or info unit headings.
        content: none;
    }

    a[href^="#"]{
        // Style in-page anchor links (like page TOCs) to not look like links.
        color: @gray-dark;
        border-bottom-width: 0;
    }

    a.a-btn {
        // These pseudo-classes are needed to guarantee specificity
        &:link,
        &:visited {
            // Replace Design System button link stylings with some generic styling
            all: unset;
            border-bottom: 1px dotted @link-underline;
            color: @link-text;
            display: inline;
            font-weight: 500;
            text-decoration: none;
        }
    }

    a.a-link__jump,
    a.m-list_link {
        // These pseudo-classes are needed to guarantee specificity
        &:link,
        &:visited {
            // Convert stand-alone (jump) links to standard inline links
            border-top: 0;
            display: inline;
            padding-top: unit( 5px / @base-font-size-px, em );
            padding-bottom: 0;
        }
    }

    .m-list__links .m-list_item {
        // Space out stand-alone links by .5em
        margin-bottom: unit( 8px / @base-font-size-px, em );
    }

    .o-info-unit-group {
        .content-l_col-1-2,
        .content-l_col-1-3,
        .content-l_col-2-3 {
            // Ensure content remains vertically aligned by rendering them as a table cell
            display: table-cell !important;
        }
        .content-l_col-1 {
            .grid_column( 12 );
        }
        .content-l_col-1-2 {
            // Keep 50/50 info unit groups at two columns for print
            .grid_column( 6 );
        }
        .content-l_col-1-3 {
            // Keep 33/33/33 info unit groups at three columns for print
            .grid_column( 4 );
        }
        .content-l_col-2-3 {
            // Maintain 2/3 layouts for print
            .grid_column( 8 );
        }
        .m-info-unit_image {
            // Print info unit images
            display: block;
        }
        .m-info-unit__inline .m-info-unit_image {
            // Preserve inline info unit image layout
            float: left;
            margin-right: unit( @grid_gutter-width / @base-font-size-px, em );
        }
    }

    // Force FCMs into multiple columns when printing
    .o-featured-content-module {
        display: flex;

        &_text {
            flex: 1;
            padding-right: @fcm-visual-width + @grid_gutter-width;
            padding-left: unit( @grid_gutter-width / @base-font-size-px, em );
        }

        &_visual {
            height: 100%;
            overflow: hidden;
            padding-right: 0;
            padding-bottom: 0;
            padding-left: 0;
            position: absolute;
            top: 0;
            right: 0;
            width: @fcm-visual-width;
        }

        &_img {
            max-width: none;
            height: 100%;
            position: absolute;
        }

        // Modifiers
        &__right &_img {
            right: 0;
        }

        &__center &_img {
            left: 50%;

            transform: translateX( -50% );

            .lt-ie9 & {
                position: absolute;
                right: -100%;
                left: -100%;
                margin: auto;
            }
        }
    }

    .o-video-player_play-btn {
        // !important used here to avoid being overridden by a much more specific
        // selector that sets the display property for this element
        // and to avoid using a selector that specific here.
        display: none !important;
    }

    .o-video-player {
        // When printing, shrink video preview images to one column with the :after
        // URL in a second column next to it.
        &_image-container {
            .grid_column( 6 );
        }
        &:after {
            content: "Watch the video at https://www.youtube.com/watch?v=" attr(data-id);
            .grid_column( 6 );
        }
    }

    .a-tagline {
        // Force the tagline's background image to be visible when printing
        color-adjust: exact;
    }

    .m-global-eyebrow,
    .join-the-conversation,
    .o-email-signup,
    .rss-subscribe,
    .o-feedback,
    .o-search-bar,
    .m-hero_image-wrapper {
        // Hide unimportant print things
        display: none;
    }

    svg.highcharts-root {
        // Ensure highcharts charts stay within the viewport and aren't cut off
        max-width: 90vw;
    }

    // Cap content line lengths at ~ 75 characters. `ch` equals the width of the
    // font's 0 glyph which is wider than some others (i, f, t, etc.) so setting
    // it to 62 gives us approximately 75 characters per line.
    .content_main,
    .content_intro {
        dd,
        dt,
        li,
        p,
        label {
            max-width: 62ch;
        }
    }

    // Solving Firefox's longstanding issue of cutting off inline-block
    // elements after one page.
    @-moz-document url-prefix() {
        html,
        body {
            margin: 0;
            padding: 0;
        }

        .content_main {
            margin: 0;
            display: block !important;
        }

        .content_sidebar {
            display: block !important;
        }
    }
});

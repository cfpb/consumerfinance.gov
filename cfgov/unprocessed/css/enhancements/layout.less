.wrapper__match-content {
    .respond-to-min(@bp-sm-min, {
        max-width: @grid_wrapper-width - ( @grid_gutter-width * 2 );
    });
}

/* topdoc
  name: Block
  family: cf-layout
    - name: Padded-left modifier
      markup: |
        Main content...
        <div class="block block__padded-left block__border-left">
            Content block with left margin, padding, and border.
        </div>
      codenotes:
        - .block.block__padded-left
    - name: Padded-right modifier
      markup: |
        <div class="block block__padded-right block__border-right">
            Content block with right margin, padding, and border.
        </div>
        Content...
      codenotes:
        - .block.block__padded-right
  tags:
    - cf-layout
*/
.respond-to-min(@bp-med-min, {
    .block {
        &__padded-left {
            padding-left: unit(@grid_gutter-width / @base-font-size-px, em);
            margin-left: unit(@grid_gutter-width / @base-font-size-px, em);
        }

        &__padded-right {
            padding-right: unit(@grid_gutter-width / @base-font-size-px, em);
            margin-right: unit(@grid_gutter-width / @base-font-size-px, em);
        }
    }
});

/* topdoc
  name: Half top padding
  family: cf-layout
  patterns:
    - name: .content__half-top-on-desk
      markup: |
        <aside class="content_sidebar content__half-top-on-desk">
          <!-- sidebar components -->
        </aside>
        <div class="content_main content__half-top-on-desk">
          <!-- main content components -->
        </div>
  tags: cf-layout
*/
.content__half-top-on-desk {
    .respond-to-min(@bp-med-min, {
        padding-top: unit( @grid_gutter-width / @base-font-size-px, em);

        &:after {
            top: unit( @grid_gutter-width / @base-font-size-px, em) !important;
        }
    });
}

/* topdoc
  name: Flush sides on small devices
  family: cf-layout
  patterns:
    - name: .content__flush-sides-on-small
      markup: |
        <aside class="content_sidebar content__flush-sides-on-small">
          <!-- sidebar components -->
        </aside>
        <div class="content_main content__flush-sides-on-small">
          <!-- main content components -->
        </div>
  tags: cf-layout
*/
.content__flush-sides-on-small {
    .respond-to-max(@bp-sm-max, {
        padding-left: 0;
        padding-right: 0;
        border-width: 0;
    });
}

/* topdoc
  name: Code styles
  family: cf-layout
  notes:
    - "Removes top margin on 1-column layouts."
  tags:
    - cf-layout
*/
.content-l_col {
    &.content-l_col-1 + &.content-l_col-1 {
        margin-top: 0;
    }
}

/* topdoc
  name: Add Large breakpoint only columns
  family: cf-layout
  notes:
    - "Columns normally only stack under @bp-sm-min.
       These keep them stacked till @bp-lg-min"
  tags:
    - cf-layout
*/
.content-l_col-1-3__on-lg {
    + .content-l_col-1-3__on-lg {
        .respond-to-max( @bp-med-max, {
            margin-top: unit( @grid_gutter-width / @base-font-size-px, em );
        } );

        .respond-to-range( @bp-sm-min, @bp-med-max, {
            &:before {
                .a-rule-break();
                content: '';
                display: block;
            }
        } );
    }

    .respond-to-range( @bp-sm-min, @bp-med-max, {
        .grid_column( 1, 1 );
    } );

    .respond-to-min( @bp-lg-min, {
        .grid_column(4);
    } );
}

.content-l_col-1-2__on-lg {
    .respond-to-max( @bp-med-max, {
        + .content-l_col-1-2__on-lg {
            margin-top: unit( @grid_gutter-width / @base-font-size-px, em );
        }
    } );

    .respond-to-range( @bp-sm-min, @bp-med-max, {
        .grid_column( 1, 1 );
    } );

    .respond-to-min( @bp-lg-min, {
        .grid_column(6);
    } );
}

.content-l_col-1-2__on-med {
    .respond-to-max( @bp-xs-max, {
        + .content-l_col-1-2__on-med {
            margin-top: unit( @grid_gutter-width / @base-font-size-px, em );
        }
    } );

    .respond-to-range( @bp-sm-min, @bp-med-max, {
        .grid_column( 6 );
    } );
}

/* topdoc
  name: Adjustments to max line length
  family: cf-layout
  notes:
    - "Limit main text lines to an optimum reading length"
  tags:
    - cf-layout
*/

.content_main,
.content_intro {
    dd,
    dt,
    h3,
    h4,
    h5,
    h6,
    li,
    p {
        max-width: 41.875rem;
    }
}

.content__2-1 .content_main .o-email-signup {
    width: 100%;
    max-width: 41.875rem;

    .respond-to-min( @bp-sm-min, {

        .m-form-field-with-button_field {
            max-width: unit( 370px / @base-font-size-px, rem );
        }
    } )
}


/* topdoc
  name: Equal height columns
  family: cf-layout
  patterns:
    - name: Default example
      markup: |
        <div class="content-l__equal-height">
            <div class="content-l_col__equal-height">
                <div class="content-l_body__equal-height">
                    Equal height box contents
                </div>
            </div>
            <div class="content-l_col__equal-height">
                <div class="content-l_body__equal-height">
                    Equal height box contents
                    <div class="content-l_footer__equal-height">
                        Bottom aligned footer
                    </div>
                </div>
            </div>
        </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .content-l__equal-height
            .content-l_col__equal-height
              .content-l_body__equal-height
                .content-l_footer__equal-height
  tags:
    - cf-layout
  notes:
    - No support for equal-height columns below IE10.
      Can be used in conjunction with other content-l
      classes to provide column widths and layout for
      browsers that do not support flexbox.
*/

.equal-height_container {
    display: flex;
    flex-wrap: wrap;
}

.equal-height_col {
    display: flex !important;
}

.equal-height_body {
    display: flex !important;
    flex-direction: column;
    align-content: stretch;
    flex: 1;
}

.equal-height_footer {
    margin-top: auto;
}

.content-l {
    .respond-to-min( @bp-sm-min, {
        &__equal-height {
            .equal-height_container;
        }

        &_col__equal-height {
            .equal-height_col;
        }

        &_body__equal-height {
            .equal-height_body;
        }

        &_footer__equal-height {
            .equal-height_footer;
        }
    } );
}

/* topdoc
  name: Sets overflow-x to hidden on content element
  family: cf-layout
  tags:
    - cf-layout
*/

.content__hide-horizontal-overflow {
    overflow-x: hidden;
}

/* topdoc
  name: Banner
  family: cf-layout
  patterns:
    - name: Default example
      markup: |
          <div class="content_banner">
              <div class="wrapper wrapper__match-content">
              </div>
          </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .content_banner
            .wrapper

  tags:
    - cf-layout
*/

@banner_bg: @gray-5;
@banner_border: @gray-40;

.content_banner {
    background-color: @banner_bg;

    .wrapper {
        padding: unit( @grid_gutter-width / @base-font-size-px, em )
                 unit( (@grid_gutter-width / 2) / @base-font-size-px, em );

        .respond-to-range(@bp-sm-min, @bp-lg-max {
            padding: unit( @grid_gutter-width / @base-font-size-px, em );
        });
    }

    &__border-bottom {
        border-bottom: 1px solid @banner_border;
    }

    &__border-top {
        border-top: 1px solid @banner_border;
    }
}

 /* topdoc
   name: Bulleted list with flush left alignment
   family: cf-layout
   notes:
     - "Add flush left styling for bulleted lists"
   tags:
     - cf-layout
 */

// TODO: Explore setting this padding value as a base style
// on lists instead of using a modifier

 .m-list__flush-left {
     padding-left: unit( 18px / @base-font-size-px, em );
 }


/* topdoc
  name: EOF
  eof: true
*/

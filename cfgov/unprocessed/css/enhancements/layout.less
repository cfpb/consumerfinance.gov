.wrapper__match-content {
  .respond-to-min( @bp-sm-min, {
    max-width: @grid_wrapper-width - ( @grid_gutter-width * 2 );
  } );
}

.content_level--1 {
  max-width: 1230px;
  margin-left: auto;
  margin-right: auto;
}

.content_level-1 {
  max-width: 930px;
  margin-left: auto;
  margin-right: auto;
}

.content_level-2 {
  max-width: 870px;
  margin-left: auto;
  margin-right: auto;
}

.content_level-3 {
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
}

.content_main__flush-inner {
  padding-top: 0;
}

/* topdoc
  name: Half top padding
  family: cf-layout
  patterns:
    - name: .content__half-top-on-desk
      markup: |
        <aside class="content_sidebar content__half-top-on-desk">
          <!-- sidebar components -->
        </aside>
        <div class="content_main content__half-top-on-desk">
          <!-- main content components -->
        </div>
  tags: cf-layout
*/
.content__half-top-on-desk {
  .respond-to-min( @bp-med-min, {
    padding-top: unit( @grid_gutter-width / @base-font-size-px, em);

    &:after {
      top: unit( @grid_gutter-width / @base-font-size-px, em) !important;
    }
  } );
}

/* topdoc
  name: Flush sides on small devices
  family: cf-layout
  patterns:
    - name: .content__flush-sides-on-small
      markup: |
        <aside class="content_sidebar content__flush-sides-on-small">
          <!-- sidebar components -->
        </aside>
        <div class="content_main content__flush-sides-on-small">
          <!-- main content components -->
        </div>
  tags: cf-layout
*/
.content__flush-sides-on-small {
  .respond-to-max( @bp-sm-max, {
    padding-left: 0;
    padding-right: 0;
    border-width: 0;
  } );
}

/* topdoc
  name: Code styles
  family: cf-layout
  notes:
    - "Removes top margin on 1-column layouts."
  tags:
    - cf-layout
*/
.content-l_col {
  &.content-l_col-1 + &.content-l_col-1 {
    margin-top: 0;
  }
}

/* topdoc
  name: Equal height columns
  family: cf-layout
  patterns:
    - name: Default example
      markup: |
        <div class="content-l__equal-height">
            <div class="content-l_col__equal-height">
                <div class="content-l_body__equal-height">
                    Equal height box contents
                </div>
            </div>
            <div class="content-l_col__equal-height">
                <div class="content-l_body__equal-height">
                    Equal height box contents
                    <div class="content-l_footer__equal-height">
                        Bottom aligned footer
                    </div>
                </div>
            </div>
        </div>
      codenotes:
        - |
          Structural cheat sheet:
          -----------------------
          .content-l__equal-height
            .content-l_col__equal-height
              .content-l_body__equal-height
                .content-l_footer__equal-height
  tags:
    - cf-layout
  notes:
    - No support for equal-height columns below IE10.
      Can be used in conjunction with other content-l
      classes to provide column widths and layout for
      browsers that do not support flexbox.
*/

.equal-height_container {
  display: flex;
  flex-wrap: wrap;
}

.equal-height_col {
  display: flex !important;
}

.equal-height_body {
  display: flex !important;
  flex-direction: column;
  align-content: stretch;
  flex: 1;
}

.equal-height_footer {
  margin-top: auto;
}

.content-l {
  .respond-to-min( @bp-sm-min, {
    &__equal-height {
      .equal-height_container();
    }

    &_col__equal-height {
      .equal-height_col();
    }

    &_body__equal-height {
      .equal-height_body();
    }

    &_footer__equal-height {
      .equal-height_footer();
    }
  } );
}

/* topdoc
  name: Sets overflow-x to hidden on content element
  family: cf-layout
  tags:
    - cf-layout
*/

.content__hide-horizontal-overflow {
  overflow-x: hidden;
}

// Center content and bleed full-width images into gutters
// Used on our story pages
.content__center-image-bleed {
  .content_main-inner {
    max-width: 41.875rem;
    margin: 0 auto;

    .o-full-width-text-group {
      overflow: inherit;
    }

    .image-bleed {
      @half-gutter-width: @grid_gutter-width / 2;
      @two-gutter-widths: @grid_gutter-width * 2;

      width: ~'calc( 100vw - @{grid_gutter-width} )';
      max-width: ~'calc( 100vw - @{grid_gutter-width} )';
      margin-left: ~'calc( -50vw + @{half-gutter-width} )';
      margin-right: ~'calc( -50vw + @{half-gutter-width} )';
      position: relative;
      left: 50%;
      right: 50%;

      .respond-to-min( @bp-sm-min, {
        width: ~'calc( 100vw - @{two-gutter-widths} )';
        max-width: ~'calc( 100vw - @{two-gutter-widths} )';
        margin-left: ~'calc( -50vw + @{grid_gutter-width} )';
        margin-right: ~'calc( -50vw + @{grid_gutter-width} )';
      } );

      .respond-to-min( @bp-xl-min, {
        width: @grid_wrapper-width - @two-gutter-widths;
        max-width: @grid_wrapper-width - @two-gutter-widths;
        margin-left: -( ( @grid_wrapper-width - @two-gutter-widths ) / 2 );
        margin-right: -( ( @grid_wrapper-width - @two-gutter-widths ) / 2 );
      } );
    }
  }
}

// Increase the size of all headings by one level
// Used on our story pages
// @TODO: Expose heading class modifiers in wagtail
.content__supersize-headings {
  .o-full-width-text-group h2 {
    .h1();
  }
}

/* topdoc
  name: Grid layout
  family: cf-layout
  patterns:
    - name: .u-layout-grid
*/

.u-hero-background() {
  position: absolute;
  z-index: -1;
  top: 0;
  left: -50%;
  width: 200vw;
  height: 100%;
  content: '';
  // This CSS color variable is hardcoded in the hero.html template.
  background: var(--m-hero-background-color);
}

.u-sidebar-background() {
  position: absolute;
  z-index: -1;
  top: 0;
  width: 100vw;
  height: 100%;
  content: '';
  background: @gray-5;
}

// Establish the wrapper inside the grid container as the grid element.
.u-layout-grid {
  &_wrapper {
    display: grid;
    max-width: 1170px;
    margin: 0 auto;
    padding-left: unit(15px / @base-font-size-px, em);
    padding-right: unit(15px / @base-font-size-px, em);
  }

  // Name all possible content area elements (appearing inside <main>).
  &_breadcrumbs {
    grid-area: c-breadcrumbs;
  }

  &_main {
    grid-area: c-main;
  }

  &_sidebar {
    grid-area: c-sidebar;
  }

  &_prefooter {
    grid-area: c-prefooter;
  }

  // TODO: The hero has a wrapper we need to ignore, so the direct reference to m-hero is a temp workaround.
  .m-hero,
  &_hero {
    grid-area: c-hero;
  }

  .u-layout-grid_wrapper {
    grid-template-areas:
      'c-breadcrumbs'
      'c-main'
      'c-sidebar';
  }

  // Mobile.
  // Set padding defaults.
  &_main,
  &_sidebar {
    padding-top: unit(30px / @base-font-size-px, em);
  }

  // Tablet size and above.
  .respond-to-min(@bp-sm-min, {
    &_wrapper {
      padding-left: unit(30px / @base-font-size-px, em);
      padding-right: unit(30px / @base-font-size-px, em);
    }

    &_main,
    &_sidebar {
      padding-top: unit(45px / @base-font-size-px, em);
    }
  });
}

// 2-1 Left-to-right (LTR) layout.
.u-layout-grid__2-1:not(&.u-layout-grid__rtl) {
  overflow-x: hidden;

  .u-layout-grid_sidebar {
    position: relative;
    padding-left: unit(15px / @base-font-size-px, em);
    margin-left: unit(-15px / @base-font-size-px, em);

    // This is the sidebar background, which bleeds to the edge.
    &:after {
      .u-sidebar-background();
      left: 0;
    }
  }

  // Desktop
  .respond-to-min( @bp-med-min, {
    .u-layout-grid_wrapper {
      grid-auto-rows: minmax(0, auto) minmax(0, auto) 1fr;
      grid-auto-columns: 1fr 100%/3;
      grid-template-areas:
        'c-hero c-hero'
        'c-breadcrumbs c-sidebar'
        'c-main c-sidebar';
    }

    .u-layout-grid_hero {
      position: relative;

      // Create the hero background bleed.
      &:after {
        .u-hero-background();
      }
    }

    .u-layout-grid_main {
      padding-right: unit(10px / @base-font-size-px, em);
    }

    .u-layout-grid_sidebar {
      padding-left: unit(30px / @base-font-size-px, em);
      margin-left: unit(20px / @base-font-size-px, em);

      &:after {
        border-left: 1px solid @gray-40;
      }
    }
  } );
}

// 2-1 Right-to-left (RTL) layout.
.u-layout-grid__2-1.u-layout-grid__rtl {
  // Mobile.
  .u-layout-grid_sidebar {
    position: relative;
    padding-right: unit(15px / @base-font-size-px, em);
    margin-right: unit(-15px / @base-font-size-px, em);

    // This is the sidebar background, which bleeds to the edge.
    &:after {
      .u-sidebar-background();
      right: 0;
      left: auto;
    }
  }

  // Desktop.
  .respond-to-min( @bp-med-min, {
    .u-layout-grid_wrapper {
      // This handles collapsing of the breadcrumbs space if they are absent.
      grid-auto-rows: minmax(0, auto) minmax(0, auto) 1fr;
      grid-auto-columns: 100%/3 1fr;
      grid-template-areas:
        'c-hero c-hero'
        'c-sidebar c-breadcrumbs'
        'c-sidebar c-main';

      // TODO: The hero has a wrapper we need to ignore, so the direct reference to m-hero is a temp workaround.
      div:has(.m-hero) {
        display: contents;
      }
    }

    // TODO: The hero has a wrapper we need to ignore, so the direct reference to m-hero is a temp workaround.
    .m-hero,
    .u-layout-grid_hero {
      position: relative;

      // Create the hero background bleed.
      &:after {
        .u-hero-background();
      }
    }

    .u-layout-grid_main {
      padding-left: unit(10px / @base-font-size-px, em);
    }

    .u-layout-grid_sidebar {
      padding-right: unit(30px / @base-font-size-px, em);
      margin-right: unit(20px / @base-font-size-px, em);

      &:after {
        border-right: 1px solid @gray-40;
      }
    }

    // If we have a breadcrumb and sidebar together,
    // we need to move the sidebar content down further.
    .u-layout-grid_breadcrumbs ~ .u-layout-grid_sidebar {
      padding-top: unit(90px / @base-font-size-px, em);
    }
  });
}

.u-layout-grid_main,
.u-layout-grid_intro {
  dd,
  dt,
  h3,
  h4,
  h5,
  h6,
  li,
  p,
  label {
    max-width: 41.875rem;
  }
}

/* topdoc
  name: EOF
  eof: true
*/
